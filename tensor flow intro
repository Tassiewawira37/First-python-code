import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

#28*28 images of handwritten digits
mnist = tf.keras.datasets.mnist

(x_train,y_train),(x_test,y_test) = mnist.load_data()
#scalling the data
x_train = tf.keras.utils.normalize(x_train,axis=1)
x_test = tf.keras.utils.normalize(x_test,axis=1)

#building first model;sequential model is a feed forward model
model = tf.keras.models.Sequential()
#model that adds syntax;layered model
model.add(tf.keras.layers.Flatten())
#hidden layers
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))

#parameters of the training model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
#training the model
model.fit(x_train,y_train,epochs=3)
#the model needs to learn ,should not memorize
#calculating the validation loss and accuracy

val_loss, val_acc = model.evaluate(x_test,y_test)
print(val_loss,val_acc)
#save the model
model.save('num_reader.model')
new_model = tf.keras.model('num_reader.model')
predictions = new_model.predict([x_test])


#predicting a model
print(np.argmax(predictions[0]))


plt.imshow(x_train[0], cmap=plt.cm.binary)
plt.show()
print(x_train[0])
